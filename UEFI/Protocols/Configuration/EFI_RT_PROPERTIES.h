#pragma once
#include "UEFIDef.h"
#include "EFI_GUID.h"

namespace EFI
{
	//
	// EFI RT Properties table GUID
	//
	constinit const EFI_GUID EFI_RT_PROPERTIES_TABLE_GUID = { 0xeb66918a, 0x7eef, 0x402a,{ 0x84, 0x2e, 0x93, 0x1d, 0x21, 0xc3, 0x8a, 0xe9 } };

	struct EFI_RT_PROPERTIES_TABLE
	{
	public:
		UINT16 Version;
		UINT16 Length;
		UINT32 RuntimeServicesSupported;
	};

	enum class EFI_RT_SUPPORTED_MASK : UINT32
	{
		EFI_RT_SUPPORTED_GET_TIME = 0x0001,
		EFI_RT_SUPPORTED_SET_TIME = 0x0002,
		EFI_RT_SUPPORTED_GET_WAKEUP_TIME = 0x0004,
		EFI_RT_SUPPORTED_SET_WAKEUP_TIME = 0x0008,
		EFI_RT_SUPPORTED_GET_VARIABLE = 0x0010,
		EFI_RT_SUPPORTED_GET_NEXT_VARIABLE_NAME = 0x0020,
		EFI_RT_SUPPORTED_SET_VARIABLE = 0x0040,
		EFI_RT_SUPPORTED_SET_VIRTUAL_ADDRESS_MAP = 0x0080,
		EFI_RT_SUPPORTED_CONVERT_POINTER = 0x0100,
		EFI_RT_SUPPORTED_GET_NEXT_HIGH_MONOTONIC_COUNT = 0x0200,
		EFI_RT_SUPPORTED_RESET_SYSTEM = 0x0400,
		EFI_RT_SUPPORTED_UPDATE_CAPSULE = 0x0800,
		EFI_RT_SUPPORTED_QUERY_CAPSULE_CAPABILITIES = 0x1000,
		EFI_RT_SUPPORTED_QUERY_VARIABLE_INFO = 0x2000,
	};
}