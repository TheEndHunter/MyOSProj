#pragma once

#include "UEFIDef.h"
#include "EFI_STATUS.h"
#include "EFI_GUID.h"
#include "EFI_STOP_BITS_TYPE.h"
#include "EFI_PARITY_TYPE.h"
#include "EFI_SERIAL_CONTORL_BITS.h"
#include "EFI_SERIAL_IO_MODE.h"

namespace EFI
{
	constinit  const ALIGN(8) EFI::EFI_GUID EFI_SERIAL_IO_PROTOCOL_GUID =          { 0xBB25CF6F, 0xF1D4, 0x11D2, {0x9a, 0x0c, 0x00, 0x90, 0x27, 0x3f, 0xc1, 0xfd}};
	constinit  const ALIGN(8) EFI::EFI_GUID EFI_SERIAL_TERMINAL_DEVICE_TYPE_GUID = { 0x6ad9a60f, 0x5815, 0x4c7c, {0x8a, 0x10, 0x50, 0x53, 0xd2, 0xbf, 0x7a, 0x1b} };

	const UINT32 EFI_SERIAL_IO_PROTOCOL_REVISION = 0x00010000;
	const UINT32 EFI_SERIAL_IO_PROTOCOL_REVISION1p1 = 0x00010001;

	 typedef EFI_STATUS(EFIAPI* EFI_SERIAL_RESET) (IN EFI_SERIAL_IO_PROTOCOL* This);

	 typedef EFI_STATUS(EFIAPI* EFI_SERIAL_SET_ATTRIBUTES) (IN EFI_SERIAL_IO_PROTOCOL* This,
		 IN UINT64 BaudRate,IN UINT32 ReceiveFifoDepth,IN UINT32 Timeout,
		 IN EFI_PARITY_TYPE Parity,IN UINT8 DataBits,IN EFI_STOP_BITS_TYPE StopBits);

	 typedef EFI_STATUS(EFIAPI* EFI_SERIAL_SET_CONTROL_BITS) (IN EFI_SERIAL_IO_PROTOCOL* This,
		 IN EFI_SERIAL_CONTROL_BITS Control);
	  
	 typedef EFI_STATUS (EFIAPI* EFI_SERIAL_GET_CONTROL_BITS) (IN EFI_SERIAL_IO_PROTOCOL* This,
			 OUT EFI_SERIAL_CONTROL_BITS* Control);

	 typedef EFI_STATUS(EFIAPI* EFI_SERIAL_WRITE) (IN EFI_SERIAL_IO_PROTOCOL* This,
			 IN OUT UINTN* BufferSize,IN VOID* Buffer);

	 typedef EFI_STATUS(EFIAPI* EFI_SERIAL_READ) (IN EFI_SERIAL_IO_PROTOCOL* This,
			 IN OUT UINTN* BufferSize,OUT VOID* Buffer);

	 struct EFI_SERIAL_IO_PROTOCOL
	 {
	 public:
		 UINT32 Revision;
		 EFI_SERIAL_RESET Reset;
		 EFI_SERIAL_SET_ATTRIBUTES SetAttributes;
		 EFI_SERIAL_SET_CONTROL_BITS SetControl;
		 EFI_SERIAL_GET_CONTROL_BITS GetControl;
		 EFI_SERIAL_WRITE Write;
		 EFI_SERIAL_READ Read;
		 EFI_SERIAL_IO_MODE* Mode;
		 CONST EFI_GUID* DeviceTypeGuid; // Revision 1.1
	 };
}
