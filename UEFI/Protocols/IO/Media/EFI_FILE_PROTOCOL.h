#pragma once
#include "UEFIDef.h"
#include "EFI_GUID.h"
#include "EFI_STATUS.h"
#include "EFI_FILE_IO_TOKEN.h"
#include "EFI_FILE_MODES.h"
#include "EFI_FILE_ATTRIBUTES.h"


namespace EFI
{
	struct EFI_FILE_PROTOCOL;

	inline const UINT32 EFI_FILE_PROTOCOL_REVISION = 0x00010000;
	inline const UINT32 EFI_FILE_PROTOCOL_REVISION2 = 0x00020000;
	inline const UINT32 EFI_FILE_PROTOCOL_LATEST_REVISION = EFI_FILE_PROTOCOL_REVISION2;

	typedef EFI::EFI_STATUS(EFIAPI* EFI_FILE_OPEN) (IN EFI_FILE_PROTOCOL* self,OUT EFI_FILE_PROTOCOL** newHandle,IN CHAR16* fileName,IN EFI_FILE_MODES openMode,IN UINT64 attributes);
	typedef EFI::EFI_STATUS(EFIAPI* EFI_FILE_CLOSE) (IN EFI_FILE_PROTOCOL* self);
	typedef EFI::EFI_STATUS(EFIAPI* EFI_FILE_DELETE) (IN EFI_FILE_PROTOCOL* self);
	typedef EFI::EFI_STATUS(EFIAPI* EFI_FILE_READ) (IN EFI_FILE_PROTOCOL* self,IN OUT UINTN* bufferSize,OUT VOID* buffer);
	typedef EFI::EFI_STATUS(EFIAPI* EFI_FILE_WRITE) (IN EFI_FILE_PROTOCOL* self, IN OUT UINTN* bufferSize,IN VOID* buffer);

	typedef EFI::EFI_STATUS(EFIAPI* EFI_FILE_OPEN_EX) (IN EFI_FILE_PROTOCOL* self, OUT EFI_FILE_PROTOCOL** newHandle, IN CHAR16* fileName, IN EFI_FILE_MODES openMode, IN UINT64 attributes, IN OUT EFI_FILE_IO_TOKEN* token);
	typedef EFI::EFI_STATUS(EFIAPI* EFI_FILE_READ_EX) (IN EFI_FILE_PROTOCOL* self,IN OUT EFI_FILE_IO_TOKEN* token);
	typedef EFI::EFI_STATUS(EFIAPI* EFI_FILE_WRITE_EX) (IN EFI_FILE_PROTOCOL* selft,IN OUT EFI_FILE_IO_TOKEN* token);
	typedef EFI::EFI_STATUS(EFIAPI* EFI_FILE_FLUSH_EX) (IN EFI_FILE_PROTOCOL* self,IN OUT EFI_FILE_IO_TOKEN* token);

	typedef EFI::EFI_STATUS(EFIAPI* EFI_FILE_SET_POSITION) (IN EFI_FILE_PROTOCOL* selft,IN UINT64 position);
	typedef EFI::EFI_STATUS(EFIAPI* EFI_FILE_GET_POSITION) (IN EFI_FILE_PROTOCOL* selft,OUT UINT64* position);
	typedef EFI::EFI_STATUS(EFIAPI* EFI_FILE_GET_INFO) (IN EFI_FILE_PROTOCOL* self,IN const EFI_GUID* informationType,IN OUT UINTN* bufferSize,OUT VOID_PTR buffer);
	typedef EFI::EFI_STATUS(EFIAPI* EFI_FILE_SET_INFO) (IN EFI_FILE_PROTOCOL* self,IN const EFI_GUID* informationType,IN UINTN bufferSize,IN VOID_PTR buffer);
	typedef EFI::EFI_STATUS(EFIAPI* EFI_FILE_FLUSH) (IN EFI_FILE_PROTOCOL* selft);

	struct EFI_FILE_PROTOCOL
	{
	public:
		UINT64 Revision;
		EFI_FILE_OPEN Open;
		EFI_FILE_CLOSE Close;
		EFI_FILE_DELETE Delete;
		EFI_FILE_READ Read;
		EFI_FILE_WRITE Write;
		EFI_FILE_GET_POSITION GetPosition;
		EFI_FILE_SET_POSITION SetPosition;
		EFI_FILE_GET_INFO GetInfo;
		EFI_FILE_SET_INFO SetInfo;
		EFI_FILE_FLUSH Flush;
		EFI_FILE_OPEN_EX OpenEx; // Added for revision 2
		EFI_FILE_READ_EX ReadEx; // Added for revision 2
		EFI_FILE_WRITE_EX WriteEx; // Added for revision 2
		EFI_FILE_FLUSH_EX FlushEx; // Added for revision 2
	};
}
