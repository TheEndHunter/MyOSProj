#include "EFI_STATUS.h"

namespace EFI
{
	constinit const CHAR16* _SUCCESS = u"SUCCESS";
	constinit const CHAR16* _LOAD_ERROR = u"LOAD_ERROR";
	constinit const CHAR16* _INVALID_PARAMETER = u"INVALID_PARAMETER";
	constinit const CHAR16* _UNSUPPORTED = u"UNSUPPORTED";
	constinit const CHAR16* _BAD_BUFFER_SIZE = u"BAD_BUFFER_SIZE";
	constinit const CHAR16* _BUFFER_TOO_SMALL = u"BUFFER_TOO_SMALL";
	constinit const CHAR16* _NOT_READY = u"NOT_READY";
	constinit const CHAR16* _DEVICE_ERROR = u"DEVICE_ERROR";
	constinit const CHAR16* _WRITE_PROTECTED = u"WRITE_PROTECTED";
	constinit const CHAR16* _OUT_OF_RESOURCES = u"OUT_OF_RESOURCES";
	constinit const CHAR16* _VOLUME_CORRUPTED = u"VOLUME_CORRUPTED";
	constinit const CHAR16* _VOLUME_FULL = u"VOLUME_FULL";
	constinit const CHAR16* _NO_MEDIA = u"NO_MEDIA";
	constinit const CHAR16* _MEDIA_CHANGED = u"MEDIA_CHANGED";
	constinit const CHAR16* _NOT_FOUND = u"NOT_FOUND";
	constinit const CHAR16* _ACCESS_DENIED = u"ACCESS_DENIED";
	constinit const CHAR16* _NO_RESPONSE = u"NO_RESPONSE";
	constinit const CHAR16* _NO_MAPPING = u"NO_MAPPING";
	constinit const CHAR16* _TIMEOUT = u"TIMEOUT";
	constinit const CHAR16* _NOT_STARTED = u"NOT_STARTED";
	constinit const CHAR16* _ALREADY_STARTED = u"ALREADY_STARTED";
	constinit const CHAR16* _ABORTED = u"ABORTED";
	constinit const CHAR16* _ICMP_ERROR = u"ICMP_ERROR";
	constinit const CHAR16* _TFTP_ERROR = u"TFTP_ERROR";
	constinit const CHAR16* _PROTOCOL_ERROR = u"PROTOCOL_ERROR";
	constinit const CHAR16* _INCOMPATIBLE_VERSION = u"INCOMPATIBLE_VERSION";
	constinit const CHAR16* _SECURITY_VIOLATION = u"SECURITY_VIOLATION";
	constinit const CHAR16* _CRC_ERROR = u"CRC_ERROR";
	constinit const CHAR16* _END_OF_MEDIA = u"END_OF_MEDIA";
	constinit const CHAR16* _END_OF_FILE = u"END_OF_FILE";
	constinit const CHAR16* _INVALID_LANGUAGE = u"INVALID_LANGUAGE";
	constinit const CHAR16* _COMPROMISED_DATA = u"COMPROMISED_DATA";
	constinit const CHAR16* _IP_ADDRESS_CONFLICT = u"IP_ADDRESS_CONFLICT";
	constinit const CHAR16* _HTTP_ERROR = u"HTTP_ERROR";
	constinit const CHAR16* _WARN_UNKNOWN_GLYPH = u"WARN_UNKNOWN_GLYPH";
	constinit const CHAR16* _WARN_DELETE_FAILURE = u"WARN_DELETE_FAILURE";
	constinit const CHAR16* _WARN_WRITE_FAILURE = u"WARN_WRITE_FAILURE";
	constinit const CHAR16* _WARN_BUFFER_TOO_SMALL = u"WARN_BUFFER_TOO_SMALL";
	constinit const CHAR16* _WARN_STALE_DATA = u"WARN_STALE_DATA";
	constinit const CHAR16* _WARN_FILE_SYSTEM = u"WARN_FILE_SYSTEM";
	constinit const CHAR16* _WARN_RESET_REQUIRED = u"WARN_RESET_REQUIRED";

	const CHAR16* ToString(EFI_STATUS status)
	{
		switch (status)
		{
		case EFI_STATUS::SUCCESS:
			return _SUCCESS;
		case EFI_STATUS::LOAD_ERROR:
			return _LOAD_ERROR;
		case EFI_STATUS::INVALID_PARAMETER:
			return _INVALID_PARAMETER;
		case EFI_STATUS::UNSUPPORTED:
			return _UNSUPPORTED;
		case EFI_STATUS::BAD_BUFFER_SIZE:
			return _BAD_BUFFER_SIZE;
		case EFI_STATUS::BUFFER_TOO_SMALL:
			return _BUFFER_TOO_SMALL;
		case EFI_STATUS::NOT_READY:
			return _NOT_READY;
		case EFI_STATUS::DEVICE_ERROR:
			return _DEVICE_ERROR;
		case EFI_STATUS::WRITE_PROTECTED:
			return _WRITE_PROTECTED;
		case EFI_STATUS::OUT_OF_RESOURCES:
			return _OUT_OF_RESOURCES;
		case EFI_STATUS::VOLUME_CORRUPTED:
			return _VOLUME_CORRUPTED;
		case EFI_STATUS::VOLUME_FULL:
			return _VOLUME_FULL;
		case EFI_STATUS::NO_MEDIA:
			return _NO_MEDIA;
		case EFI_STATUS::MEDIA_CHANGED:
			return _MEDIA_CHANGED;
		case EFI_STATUS::NOT_FOUND:
			return _NOT_FOUND;
		case EFI_STATUS::ACCESS_DENIED:
			return _ACCESS_DENIED;
		case EFI_STATUS::NO_RESPONSE:
			return _NO_RESPONSE;
		case EFI_STATUS::NO_MAPPING:
			return _NO_MAPPING;
		case EFI_STATUS::TIMEOUT:
			return _TIMEOUT;
		case EFI_STATUS::NOT_STARTED:
			return _NOT_STARTED;
		case EFI_STATUS::ALREADY_STARTED:
			return _ALREADY_STARTED;
		case EFI_STATUS::ABORTED:
			return _ABORTED;
		case EFI_STATUS::ICMP_ERROR:
			return _ICMP_ERROR;
		case EFI_STATUS::TFTP_ERROR:
			return _TFTP_ERROR;
		case EFI_STATUS::PROTOCOL_ERROR:
			return _PROTOCOL_ERROR;
		case EFI_STATUS::INCOMPATIBLE_VERSION:
			return _INCOMPATIBLE_VERSION;
		case EFI_STATUS::SECURITY_VIOLATION:
			return _SECURITY_VIOLATION;
		case EFI_STATUS::CRC_ERROR:
			return _CRC_ERROR;
		case EFI_STATUS::END_OF_MEDIA:
			return _END_OF_MEDIA;
		case EFI_STATUS::END_OF_FILE:
			return _END_OF_FILE;
		case EFI_STATUS::INVALID_LANGUAGE:
			return _INVALID_LANGUAGE;
		case EFI_STATUS::COMPROMISED_DATA:
			return _COMPROMISED_DATA;
		case EFI_STATUS::IP_ADDRESS_CONFLICT:
			return _IP_ADDRESS_CONFLICT;
		case EFI_STATUS::HTTP_ERROR:
			return _HTTP_ERROR;

		case EFI_STATUS::WARN_UNKNOWN_GLYPH:
			return _WARN_UNKNOWN_GLYPH;
		case EFI_STATUS::WARN_DELETE_FAILURE:
			return _WARN_DELETE_FAILURE;
		case EFI_STATUS::WARN_WRITE_FAILURE:
			return _WARN_WRITE_FAILURE;
		case EFI_STATUS::WARN_BUFFER_TOO_SMALL:
			return _WARN_BUFFER_TOO_SMALL;
		case EFI_STATUS::WARN_STALE_DATA:
			return _WARN_STALE_DATA;
		case EFI_STATUS::WARN_FILE_SYSTEM:
			return _WARN_FILE_SYSTEM;
		case EFI_STATUS::WARN_RESET_REQUIRED:
			return _WARN_RESET_REQUIRED;
		}
	}
}