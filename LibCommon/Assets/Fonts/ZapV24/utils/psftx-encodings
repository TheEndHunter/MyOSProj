#!/usr/bin/env python3

#########################################################################
#                                                                       #
#    Check PSFTX Text Representation for CharMap Encodings Coverage     #
#                 Copyright (C) 2017-24, John Zaitseff                  #
#                                                                       #
#########################################################################

# Author: John Zaitseff <J.Zaitseff@zap.org.au>

# This program takes a PSFTX text representation of a font and checks to
# see which charmap encodings are covered by that font.
#
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <https://www.gnu.org/licenses/>.


__version__ = '1.5'
__author__ = 'John Zaitseff <J.Zaitseff@zap.org.au>'


import sys
import argparse
import os.path
import codecs
from collections import OrderedDict

import psftxio
import unicustom


#########################################################################
# Global constants and variables

BUILTIN_ENCODINGS = OrderedDict([
    # Only single-byte charmap encodings are supported
    ('ascii',        'US English'),
    ('iso-8859-1',   'Latin-1 Western European'),
    ('iso-8859-2',   'Latin-2 Central European'),
    ('iso-8859-3',   'Latin-3 South European'),
    ('iso-8859-4',   'Latin-4 North European'),
    ('iso-8859-5',   'Latin/Cyrillic'),
    ('iso-8859-6',   'Latin/Arabic'),
    ('iso-8859-7',   'Latin/Greek'),
    ('iso-8859-8',   'Latin/Hebrew'),
    ('iso-8859-9',   'Latin-5 Turkish'),
    ('iso-8859-10',  'Latin-6 Nordic'),
    ('iso-8859-11',  'Latin/Thai'),
    ('iso-8859-13',  'Latin-7 Baltic Rim'),
    ('iso-8859-14',  'Latin-8 Celtic'),
    ('iso-8859-15',  'Latin-9 Western European'),
    ('iso-8859-16',  'Latin-10 South-Eastern European'),
    ('cp437',        'DOS traditional'),
    ('cp737',        'DOS Greek'),
    ('cp775',        'DOS Baltic Rim'),
    ('cp850',        'DOS Latin-1 Western European'),
    ('cp852',        'DOS Latin-2 Central European'),
    ('cp855',        'DOS Cyrillic'),
    ('cp857',        'DOS Turkish'),
    ('cp860',        'DOS Portuguese'),
    ('cp861',        'DOS Icelandic'),
    ('cp862',        'DOS Hebrew'),
    ('cp863',        'DOS Canadian French'),
    ('cp864',        'DOS Arabic'),
    ('cp865',        'DOS Nordic'),
    ('cp866',        'DOS Cyrillic/Russian'),
    ('cp869',        'DOS Greek 2'),
    ('cp874',        'DOS/Windows Thai'),
    ('windows-1250', 'Windows Central/Eastern European'),
    ('windows-1251', 'Windows Cyrillic'),
    ('windows-1252', 'Windows Western European'),
    ('windows-1253', 'Windows Greek'),
    ('windows-1254', 'Windows Turkish'),
    ('windows-1255', 'Windows Hebrew'),
    ('windows-1256', 'Windows Arabic'),
    ('windows-1257', 'Windows Baltic'),
    ('windows-1258', 'Windows Vietnamese'),
    ('koi8-r',       'Latin/Russian'),
    ('koi8-u',       'Latin/Ukrainian'),
])

EXTRA_ENCODINGS = OrderedDict([
    ('uni-replacement', 'Unicode replacement'),
    ('cp437-extra',     'DOS traditional extra'),
    ('curses',          'Curses standard'),
    ('curses-sysv',     'Curses SysV'),
    ('curses-extra',    'NCurses extra'),
    ('kernel-vt100',    'Linux kernel VT100 map'),
])

EXTRA_ENCODING_TABLES = {
    # Unicode replacement character
    'uni-replacement':
        '\uFFFD'   # U+FFFD REPLACEMENT CHARACTER
        ,
    # Extra characters in CP437, 0x00 to 0x1F
    'cp437-extra':
        '\u263A'   # U+263A WHITE SMILING FACE
        '\u263B'   # U+263B BLACK SMILING FACE
        '\u2665'   # U+2665 BLACK HEART SUIT
        '\u2666'   # U+2666 BLACK DIAMOND SUIT
        '\u2663'   # U+2663 BLACK CLUB SUIT
        '\u2660'   # U+2660 BLACK SPADE SUIT
        '\u2022'   # U+2022 BULLET
        '\u25D8'   # U+25D8 INVERSE BULLET
        '\u25CB'   # U+25CB WHITE CIRCLE
        '\u25D9'   # U+25D9 INVERSE WHITE CIRCLE
        '\u2642'   # U+2642 MALE SIGN
        '\u2640'   # U+2640 FEMALE SIGN
        '\u266A'   # U+266A EIGHTH NOTE
        '\u266B'   # U+266B BEAMED EIGHTH NOTES
        '\u263C'   # U+263C WHITE SUN WITH RAYS
        '\u25BA'   # U+25BA BLACK RIGHT-POINTING POINTER
        '\u25C4'   # U+25C4 BLACK LEFT-POINTING POINTER
        '\u2195'   # U+2195 UP DOWN ARROW
        '\u203C'   # U+203C DOUBLE EXCLAMATION MARK
        '\u00B6'   # U+00B6 PILCROW SIGN
        '\u00A7'   # U+00A7 SECTION SIGN
        '\u25AC'   # U+25AC BLACK RECTANGLE
        '\u21A8'   # U+21A8 UP DOWN ARROW WITH BASE
        '\u2191'   # U+2191 UPWARDS ARROW
        '\u2193'   # U+2193 DOWNWARDS ARROW
        '\u2192'   # U+2192 RIGHTWARDS ARROW
        '\u2190'   # U+2190 LEFTWARDS ARROW
        '\u221F'   # U+221F RIGHT ANGLE
        '\u2194'   # U+2194 LEFT RIGHT ARROW
        '\u25B2'   # U+25B2 BLACK UP-POINTING TRIANGLE
        '\u25BC'   # U+25BC BLACK DOWN-POINTING TRIANGLE
        '\u2302'   # U+2302 HOUSE
        ,
    # Special characters in Curses
    'curses':
        '\u250C'   # ACS_ULCORNER -> U+250C BOX DRAWINGS LIGHT DOWN AND RIGHT
        '\u2514'   # ACS_LLCORNER -> U+2514 BOX DRAWINGS LIGHT UP AND RIGHT
        '\u2510'   # ACS_URCORNER -> U+2510 BOX DRAWINGS LIGHT DOWN AND LEFT
        '\u2518'   # ACS_LRCORNER -> U+2518 BOX DRAWINGS LIGHT UP AND LEFT
        '\u251C'   # ACS_LTEE     -> U+251C BOX DRAWINGS LIGHT VERTICAL AND RIGHT
        '\u2524'   # ACS_RTEE     -> U+2524 BOX DRAWINGS LIGHT VERTICAL AND LEFT
        '\u2534'   # ACS_BTEE     -> U+2534 BOX DRAWINGS LIGHT UP AND HORIZONTAL
        '\u252C'   # ACS_TTEE     -> U+252C BOX DRAWINGS LIGHT DOWN AND HORIZONTAL
        '\u2500'   # ACS_HLINE    -> U+2500 BOX DRAWINGS LIGHT HORIZONTAL
        '\u2502'   # ACS_VLINE    -> U+2502 BOX DRAWINGS LIGHT VERTICAL
        '\u253C'   # ACS_PLUS     -> U+253C BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL
        '\u23BA'   # ACS_S1       -> U+23BA HORIZONTAL SCAN LINE-1
        '\u23BD'   # ACS_S9       -> U+23BD HORIZONTAL SCAN LINE-9
        '\u25C6'   # ACS_DIAMOND  -> U+25C6 BLACK DIAMOND
        '\u2592'   # ACS_CKBOARD, ACS_BOARD -> U+2592 MEDIUM SHADE
        '\u00B0'   # ACS_DEGREE   -> U+00B0 DEGREE SIGN
        '\u00B1'   # ACS_PLMINUS  -> U+00B1 PLUS-MINUS SIGN
        '\u00B7'   # ACS_BULLET   -> U+00B7 MIDDLE DOT
        '\u2190'   # ACS_LARROW   -> U+2190 LEFTWARDS ARROW
        '\u2192'   # ACS_RARROW   -> U+2192 RIGHTWARDS ARROW
        '\u2193'   # ACS_DARROW   -> U+2193 DOWNWARDS ARROW
        '\u2191'   # ACS_UARROW   -> U+2191 UPWARDS ARROW
        '\u2603'   # ACS_LANTERN  -> U+2603 SNOWMAN (NCurses source code only)
        '\u240B'   # ACS_LANTERN  -> U+240B SYMBOL FOR VERTICAL TABULATION
        '\u25AE'   # ACS_BLOCK    -> U+25AE BLACK VERTICAL RECTANGLE
        ,
    # Special characters in SysV-style Curses
    'curses-sysv':
        '\u23BB'   # ACS_S3       -> U+23BB HORIZONTAL SCAN LINE-3
        '\u23BC'   # ACS_S7       -> U+23BC HORIZONTAL SCAN LINE-7
        '\u2264'   # ACS_LEQUAL   -> U+2264 LESS-THAN OR EQUAL TO
        '\u2265'   # ACS_GEQUAL   -> U+2265 GREATER-THAN OR EQUAL TO
        '\u03C0'   # ACS_PI       -> U+03C0 GREEK SMALL LETTER PI
        '\u2260'   # ACS_NEQUAL   -> U+2260 NOT EQUAL TO
        '\u00A3'   # ACS_STERLING -> U+00A3 POUND SIGN
        ,
    # Special characters in NCursesW
    'curses-extra':
        '\u250F'   # WACS_D_ULCORNER -> U+250F BOX DRAWINGS HEAVY DOWN AND RIGHT
        '\u2517'   # WACS_D_LLCORNER -> U+2517 BOX DRAWINGS HEAVY UP AND RIGHT
        '\u2513'   # WACS_D_URCORNER -> U+2513 BOX DRAWINGS HEAVY DOWN AND LEFT
        '\u251B'   # WACS_D_LRCORNER -> U+251B BOX DRAWINGS HEAVY UP AND LEFT
        '\u252B'   # WACS_D_RTEE     -> U+252B BOX DRAWINGS HEAVY VERTICAL AND LEFT
        '\u2523'   # WACS_D_LTEE     -> U+2523 BOX DRAWINGS HEAVY VERTICAL AND RIGHT
        '\u253B'   # WACS_D_BTEE     -> U+253B BOX DRAWINGS HEAVY UP AND HORIZONTAL
        '\u2533'   # WACS_D_TTEE     -> U+2533 BOX DRAWINGS HEAVY DOWN AND HORIZONTAL
        '\u2501'   # WACS_D_HLINE    -> U+2501 BOX DRAWINGS HEAVY HORIZONTAL
        '\u2503'   # WACS_D_VLINE    -> U+2503 BOX DRAWINGS HEAVY VERTICAL
        '\u254B'   # WACS_D_PLUS     -> U+254B BOX DRAWINGS HEAVY VERTICAL AND HORIZONTAL
        '\u2554'   # WACS_T_ULCORNER -> U+2554 BOX DRAWINGS DOUBLE DOWN AND RIGHT
        '\u255A'   # WACS_T_LLCORNER -> U+255A BOX DRAWINGS DOUBLE UP AND RIGHT
        '\u2557'   # WACS_T_URCORNER -> U+2557 BOX DRAWINGS DOUBLE DOWN AND LEFT
        '\u255D'   # WACS_T_LRCORNER -> U+255D BOX DRAWINGS DOUBLE UP AND LEFT
        '\u2563'   # WACS_T_RTEE     -> U+2563 BOX DRAWINGS DOUBLE VERTICAL AND LEFT
        '\u2560'   # WACS_T_LTEE     -> U+2560 BOX DRAWINGS DOUBLE VERTICAL AND RIGHT
        '\u2569'   # WACS_T_BTEE     -> U+2569 BOX DRAWINGS DOUBLE UP AND HORIZONTAL
        '\u2566'   # WACS_T_TTEE     -> U+2566 BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL
        '\u2550'   # WACS_T_HLINE    -> U+2550 BOX DRAWINGS DOUBLE HORIZONTAL
        '\u2551'   # WACS_T_VLINE    -> U+2551 BOX DRAWINGS DOUBLE VERTICAL
        '\u256C'   # WACS_T_PLUS     -> U+256C BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL
        ,
    # VT100 console map in the Linux kernel (.../drivers/tty/vt/consolemap.c)
    'kernel-vt100':
        # Control characters 0x00 to 0x1F are ignored here
        '\u0020'   # U+0020 SPACE
        '\u0021'   # U+0021 EXCLAMATION MARK
        '\u0022'   # U+0022 QUOTATION MARK
        '\u0023'   # U+0023 NUMBER SIGN
        '\u0024'   # U+0024 DOLLAR SIGN
        '\u0025'   # U+0025 PERCENT SIGN
        '\u0026'   # U+0026 AMPERSAND
        '\u0027'   # U+0027 APOSTROPHE
        '\u0028'   # U+0028 LEFT PARENTHESIS
        '\u0029'   # U+0029 RIGHT PARENTHESIS
        '\u002A'   # U+002A ASTERISK
        '\u2192'   # U+2192 RIGHTWARDS ARROW
        '\u2190'   # U+2190 LEFTWARDS ARROW
        '\u2191'   # U+2191 UPWARDS ARROW
        '\u2193'   # U+2193 DOWNWARDS ARROW
        '\u002F'   # U+002F SOLIDUS
        '\u2588'   # U+2588 FULL BLOCK
        '\u0031'   # U+0031 DIGIT ONE
        '\u0032'   # U+0032 DIGIT TWO
        '\u0033'   # U+0033 DIGIT THREE
        '\u0034'   # U+0034 DIGIT FOUR
        '\u0035'   # U+0035 DIGIT FIVE
        '\u0036'   # U+0036 DIGIT SIX
        '\u0037'   # U+0037 DIGIT SEVEN
        '\u0038'   # U+0038 DIGIT EIGHT
        '\u0039'   # U+0039 DIGIT NINE
        '\u003A'   # U+003A COLON
        '\u003B'   # U+003B SEMICOLON
        '\u003C'   # U+003C LESS-THAN SIGN
        '\u003D'   # U+003D EQUALS SIGN
        '\u003E'   # U+003E GREATER-THAN SIGN
        '\u003F'   # U+003F QUESTION MARK
        '\u0040'   # U+0040 COMMERCIAL AT
        '\u0041'   # U+0041 LATIN CAPITAL LETTER A
        '\u0042'   # U+0042 LATIN CAPITAL LETTER B
        '\u0043'   # U+0043 LATIN CAPITAL LETTER C
        '\u0044'   # U+0044 LATIN CAPITAL LETTER D
        '\u0045'   # U+0045 LATIN CAPITAL LETTER E
        '\u0046'   # U+0046 LATIN CAPITAL LETTER F
        '\u0047'   # U+0047 LATIN CAPITAL LETTER G
        '\u0048'   # U+0048 LATIN CAPITAL LETTER H
        '\u0049'   # U+0049 LATIN CAPITAL LETTER I
        '\u004A'   # U+004A LATIN CAPITAL LETTER J
        '\u004B'   # U+004B LATIN CAPITAL LETTER K
        '\u004C'   # U+004C LATIN CAPITAL LETTER L
        '\u004D'   # U+004D LATIN CAPITAL LETTER M
        '\u004E'   # U+004E LATIN CAPITAL LETTER N
        '\u004F'   # U+004F LATIN CAPITAL LETTER O
        '\u0050'   # U+0050 LATIN CAPITAL LETTER P
        '\u0051'   # U+0051 LATIN CAPITAL LETTER Q
        '\u0052'   # U+0052 LATIN CAPITAL LETTER R
        '\u0053'   # U+0053 LATIN CAPITAL LETTER S
        '\u0054'   # U+0054 LATIN CAPITAL LETTER T
        '\u0055'   # U+0055 LATIN CAPITAL LETTER U
        '\u0056'   # U+0056 LATIN CAPITAL LETTER V
        '\u0057'   # U+0057 LATIN CAPITAL LETTER W
        '\u0058'   # U+0058 LATIN CAPITAL LETTER X
        '\u0059'   # U+0059 LATIN CAPITAL LETTER Y
        '\u005A'   # U+005A LATIN CAPITAL LETTER Z
        '\u005B'   # U+005B LEFT SQUARE BRACKET
        '\u005C'   # U+005C REVERSE SOLIDUS
        '\u005D'   # U+005D RIGHT SQUARE BRACKET
        '\u005E'   # U+005E CIRCUMFLEX ACCENT
        # Control characters 0x7F to 0x9F are ignored here
        '\u00A0'   # U+00A0 NO-BREAK SPACE
        '\u25C6'   # U+25C6 BLACK DIAMOND
        '\u2592'   # U+2592 MEDIUM SHADE
        '\u2409'   # U+2409 SYMBOL FOR HORIZONTAL TABULATION
        '\u240C'   # U+240C SYMBOL FOR FORM FEED
        '\u240D'   # U+240D SYMBOL FOR CARRIAGE RETURN
        '\u240A'   # U+240A SYMBOL FOR LINE FEED
        '\u00B0'   # U+00B0 DEGREE SIGN
        '\u00B1'   # U+00B1 PLUS-MINUS SIGN
        '\u2591'   # U+2591 LIGHT SHADE
        '\u240B'   # U+240B SYMBOL FOR VERTICAL TABULATION
        '\u2518'   # U+2518 BOX DRAWINGS LIGHT UP AND LEFT
        '\u2510'   # U+2510 BOX DRAWINGS LIGHT DOWN AND LEFT
        '\u250C'   # U+250C BOX DRAWINGS LIGHT DOWN AND RIGHT
        '\u2514'   # U+2514 BOX DRAWINGS LIGHT UP AND RIGHT
        '\u253C'   # U+253C BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL
        '\u23BA'   # U+23BA HORIZONTAL SCAN LINE-1
        '\u23BB'   # U+23BB HORIZONTAL SCAN LINE-3
        '\u2500'   # U+2500 BOX DRAWINGS LIGHT HORIZONTAL
        '\u23BC'   # U+23BC HORIZONTAL SCAN LINE-7
        '\u23BD'   # U+23BD HORIZONTAL SCAN LINE-9
        '\u251C'   # U+251C BOX DRAWINGS LIGHT VERTICAL AND RIGHT
        '\u2524'   # U+2524 BOX DRAWINGS LIGHT VERTICAL AND LEFT
        '\u2534'   # U+2534 BOX DRAWINGS LIGHT UP AND HORIZONTAL
        '\u252C'   # U+252C BOX DRAWINGS LIGHT DOWN AND HORIZONTAL
        '\u2502'   # U+2502 BOX DRAWINGS LIGHT VERTICAL
        '\u2264'   # U+2264 LESS-THAN OR EQUAL TO
        '\u2265'   # U+2265 GREATER-THAN OR EQUAL TO
        '\u03C0'   # U+03C0 GREEK SMALL LETTER PI
        '\u2260'   # U+2260 NOT EQUAL TO
        '\u00A3'   # U+00A3 POUND SIGN
        '\u00B7'   # U+00B7 MIDDLE DOT
        '\u00A0'   # U+00A0 NO-BREAK SPACE
        '\u00A1'   # U+00A1 INVERTED EXCLAMATION MARK
        '\u00A2'   # U+00A2 CENT SIGN
        '\u00A3'   # U+00A3 POUND SIGN
        '\u00A4'   # U+00A4 CURRENCY SIGN
        '\u00A5'   # U+00A5 YEN SIGN
        '\u00A6'   # U+00A6 BROKEN BAR
        '\u00A7'   # U+00A7 SECTION SIGN
        '\u00A8'   # U+00A8 DIAERESIS
        '\u00A9'   # U+00A9 COPYRIGHT SIGN
        '\u00AA'   # U+00AA FEMININE ORDINAL INDICATOR
        '\u00AB'   # U+00AB LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
        '\u00AC'   # U+00AC NOT SIGN
        '\u00AD'   # U+00AD SOFT HYPHEN
        '\u00AE'   # U+00AE REGISTERED SIGN
        '\u00AF'   # U+00AF MACRON
        '\u00B0'   # U+00B0 DEGREE SIGN
        '\u00B1'   # U+00B1 PLUS-MINUS SIGN
        '\u00B2'   # U+00B2 SUPERSCRIPT TWO
        '\u00B3'   # U+00B3 SUPERSCRIPT THREE
        '\u00B4'   # U+00B4 ACUTE ACCENT
        '\u00B5'   # U+00B5 MICRO SIGN
        '\u00B6'   # U+00B6 PILCROW SIGN
        '\u00B7'   # U+00B7 MIDDLE DOT
        '\u00B8'   # U+00B8 CEDILLA
        '\u00B9'   # U+00B9 SUPERSCRIPT ONE
        '\u00BA'   # U+00BA MASCULINE ORDINAL INDICATOR
        '\u00BB'   # U+00BB RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
        '\u00BC'   # U+00BC VULGAR FRACTION ONE QUARTER
        '\u00BD'   # U+00BD VULGAR FRACTION ONE HALF
        '\u00BE'   # U+00BE VULGAR FRACTION THREE QUARTERS
        '\u00BF'   # U+00BF INVERTED QUESTION MARK
        '\u00C0'   # U+00C0 LATIN CAPITAL LETTER A WITH GRAVE
        '\u00C1'   # U+00C1 LATIN CAPITAL LETTER A WITH ACUTE
        '\u00C2'   # U+00C2 LATIN CAPITAL LETTER A WITH CIRCUMFLEX
        '\u00C3'   # U+00C3 LATIN CAPITAL LETTER A WITH TILDE
        '\u00C4'   # U+00C4 LATIN CAPITAL LETTER A WITH DIAERESIS
        '\u00C5'   # U+00C5 LATIN CAPITAL LETTER A WITH RING ABOVE
        '\u00C6'   # U+00C6 LATIN CAPITAL LETTER AE
        '\u00C7'   # U+00C7 LATIN CAPITAL LETTER C WITH CEDILLA
        '\u00C8'   # U+00C8 LATIN CAPITAL LETTER E WITH GRAVE
        '\u00C9'   # U+00C9 LATIN CAPITAL LETTER E WITH ACUTE
        '\u00CA'   # U+00CA LATIN CAPITAL LETTER E WITH CIRCUMFLEX
        '\u00CB'   # U+00CB LATIN CAPITAL LETTER E WITH DIAERESIS
        '\u00CC'   # U+00CC LATIN CAPITAL LETTER I WITH GRAVE
        '\u00CD'   # U+00CD LATIN CAPITAL LETTER I WITH ACUTE
        '\u00CE'   # U+00CE LATIN CAPITAL LETTER I WITH CIRCUMFLEX
        '\u00CF'   # U+00CF LATIN CAPITAL LETTER I WITH DIAERESIS
        '\u00D0'   # U+00D0 LATIN CAPITAL LETTER ETH
        '\u00D1'   # U+00D1 LATIN CAPITAL LETTER N WITH TILDE
        '\u00D2'   # U+00D2 LATIN CAPITAL LETTER O WITH GRAVE
        '\u00D3'   # U+00D3 LATIN CAPITAL LETTER O WITH ACUTE
        '\u00D4'   # U+00D4 LATIN CAPITAL LETTER O WITH CIRCUMFLEX
        '\u00D5'   # U+00D5 LATIN CAPITAL LETTER O WITH TILDE
        '\u00D6'   # U+00D6 LATIN CAPITAL LETTER O WITH DIAERESIS
        '\u00D7'   # U+00D7 MULTIPLICATION SIGN
        '\u00D8'   # U+00D8 LATIN CAPITAL LETTER O WITH STROKE
        '\u00D9'   # U+00D9 LATIN CAPITAL LETTER U WITH GRAVE
        '\u00DA'   # U+00DA LATIN CAPITAL LETTER U WITH ACUTE
        '\u00DB'   # U+00DB LATIN CAPITAL LETTER U WITH CIRCUMFLEX
        '\u00DC'   # U+00DC LATIN CAPITAL LETTER U WITH DIAERESIS
        '\u00DD'   # U+00DD LATIN CAPITAL LETTER Y WITH ACUTE
        '\u00DE'   # U+00DE LATIN CAPITAL LETTER THORN
        '\u00DF'   # U+00DF LATIN SMALL LETTER SHARP S
        '\u00E0'   # U+00E0 LATIN SMALL LETTER A WITH GRAVE
        '\u00E1'   # U+00E1 LATIN SMALL LETTER A WITH ACUTE
        '\u00E2'   # U+00E2 LATIN SMALL LETTER A WITH CIRCUMFLEX
        '\u00E3'   # U+00E3 LATIN SMALL LETTER A WITH TILDE
        '\u00E4'   # U+00E4 LATIN SMALL LETTER A WITH DIAERESIS
        '\u00E5'   # U+00E5 LATIN SMALL LETTER A WITH RING ABOVE
        '\u00E6'   # U+00E6 LATIN SMALL LETTER AE
        '\u00E7'   # U+00E7 LATIN SMALL LETTER C WITH CEDILLA
        '\u00E8'   # U+00E8 LATIN SMALL LETTER E WITH GRAVE
        '\u00E9'   # U+00E9 LATIN SMALL LETTER E WITH ACUTE
        '\u00EA'   # U+00EA LATIN SMALL LETTER E WITH CIRCUMFLEX
        '\u00EB'   # U+00EB LATIN SMALL LETTER E WITH DIAERESIS
        '\u00EC'   # U+00EC LATIN SMALL LETTER I WITH GRAVE
        '\u00ED'   # U+00ED LATIN SMALL LETTER I WITH ACUTE
        '\u00EE'   # U+00EE LATIN SMALL LETTER I WITH CIRCUMFLEX
        '\u00EF'   # U+00EF LATIN SMALL LETTER I WITH DIAERESIS
        '\u00F0'   # U+00F0 LATIN SMALL LETTER ETH
        '\u00F1'   # U+00F1 LATIN SMALL LETTER N WITH TILDE
        '\u00F2'   # U+00F2 LATIN SMALL LETTER O WITH GRAVE
        '\u00F3'   # U+00F3 LATIN SMALL LETTER O WITH ACUTE
        '\u00F4'   # U+00F4 LATIN SMALL LETTER O WITH CIRCUMFLEX
        '\u00F5'   # U+00F5 LATIN SMALL LETTER O WITH TILDE
        '\u00F6'   # U+00F6 LATIN SMALL LETTER O WITH DIAERESIS
        '\u00F7'   # U+00F7 DIVISION SIGN
        '\u00F8'   # U+00F8 LATIN SMALL LETTER O WITH STROKE
        '\u00F9'   # U+00F9 LATIN SMALL LETTER U WITH GRAVE
        '\u00FA'   # U+00FA LATIN SMALL LETTER U WITH ACUTE
        '\u00FB'   # U+00FB LATIN SMALL LETTER U WITH CIRCUMFLEX
        '\u00FC'   # U+00FC LATIN SMALL LETTER U WITH DIAERESIS
        '\u00FD'   # U+00FD LATIN SMALL LETTER Y WITH ACUTE
        '\u00FE'   # U+00FE LATIN SMALL LETTER THORN
        '\u00FF'   # U+00FF LATIN SMALL LETTER Y WITH DIAERESIS
        ,
}


#########################################################################
# Output functions

def print_font_info(font, name):
    """Print information about the font, including its filename."""

    has_unicode = font.has_unicode_mapping()
    hgn = font.highest_glyph_number()
    count = font.count()

    print('Filename:    ', name)
    print('PSF version: ', str(font.version) if font.version else '(Unknown)')

    if count:
        if count == hgn + 1:
            count_str = '%d' % (hgn + 1)
        else:
            count_str = '%d (%d missing)' % (hgn + 1, hgn + 1 - count)

        print('Glyph size:   %d x %d pixels' % (font.width, font.height))
        print('Glyph count: ', count_str)
        print('Unicode font:','Yes (mapping table present)' if has_unicode \
              else 'No (mapping table not present)')
    else:
        print('Glyph size:   (Unknown)')
        print('Glyph count:  0')
        print('Unicode font: No (mapping table not present)')


def create_encoding_tables():
    """Create and return encoding tables.

    This function creates an ordered mapping of builtin and additional
    encoding names to printable description strings, as well as a
    dictionary of encoding names to strings of Unicode characters
    contained in those encodings.
    """

    encodings = OrderedDict(BUILTIN_ENCODINGS)
    encoding_tables = {}

    for encoding in encodings.keys():
        codec = codecs.lookup(encoding)
        raw_encoding_table = ((codec.decode(bytes([b]), 'ignore'))[0]
                              for b in range(256))
        # Ignore unmapped byte ranges and control characters
        encoding_tables[encoding] = [char for char in raw_encoding_table
            if char != '' and not (0x00 <= ord(char) <= 0x1F
                                   or 0x7F <= ord(char) <= 0x9F)]

    for (encoding, description) in EXTRA_ENCODINGS.items():
        encodings[encoding] = description
    for (encoding, encoding_table) in EXTRA_ENCODING_TABLES.items():
        encoding_tables[encoding] = encoding_table

    return (encodings, encoding_tables)


def print_uni(char):
    """Print a standard representation of a Unicode character or sequence."""

    if len(char) == 1:
        print('        U+%04X %s' % (ord(char), unicustom.name(char)))
    else:
        print('        SEQ', '\n      + '.join(
              ['U+%04X %s' % (ord(c), unicustom.name(c)) for c in char]))


def print_font_coverage(font, encodings, encoding_tables):
    """Print which encodings are covered by the font.

    Each encoding in the ordered dictionary encodings is tested one at a
    time; any character in the encoding *not* found in the font is
    printed out.  In addition, a list of characters in the font not found
    in any encoding is also printed out.
    """

    unicode_mappings = font.get_all_mappings()
    not_seen = list(unicode_mappings.keys())

    print('Mappings:     %d' % len(not_seen))

    for (encoding, description) in encodings.items():
        encoding_table = encoding_tables[encoding]

        missing = []
        for char in encoding_table:
            if char not in unicode_mappings:
                missing.append(char)
            elif char in not_seen:
                not_seen.remove(char)

        encoding_count = len(encoding_table)
        missing_count = len(missing)
        print()
        print('Encoding %s (%s):' % (encoding, description))
        print('    Characters in encoding: %d' % encoding_count)
        print('    Characters matched:     %d' % (encoding_count - missing_count))
        print('    Characters missing:     %d' % missing_count)
        if missing_count:
            print('    Missing characters:')
            missing.sort()
            for char in missing:
                print_uni(char)

    # Print any additional characters present in the font

    not_seen_count = len(not_seen)
    print()
    print('Additional characters:')
    print('    Characters present: %d' % not_seen_count)
    if not_seen_count:
        print('    Characters:')
        not_seen.sort()
        for char in not_seen:
            print_uni(char)


#########################################################################
# Process command line arguments

def parse_command_line():
    parser = argparse.ArgumentParser(
        usage='%(prog)s [-h] [INPUT]',
        description='Check PSFTX text representation for charmap encodings coverage.')
    parser.add_argument(
        'input', metavar='INPUT', nargs=argparse.OPTIONAL,
        type=argparse.FileType('r'), default=sys.stdin,
        help='text PSFTX file to check (default: stdin)')

    args = parser.parse_args()
    return args


#########################################################################
# Main program

def main():
    args = parse_command_line()

    font = psftxio.readfont(args.input, strict=False)
    name = os.path.basename(args.input.name)

    print_font_info(font, name)

    if font.count() > 0 and font.has_unicode_mapping:
        (encodings, encoding_tables) = create_encoding_tables()
        print_font_coverage(font, encodings, encoding_tables)


if __name__ == '__main__':
    main()
