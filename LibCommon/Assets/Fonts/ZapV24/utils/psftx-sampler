#!/usr/bin/env python3

#########################################################################
#                                                                       #
#             Generate a Text Output Font Coverage Sampler              #
#                 Copyright (C) 2017-24, John Zaitseff                  #
#                                                                       #
#########################################################################

# Author: John Zaitseff <J.Zaitseff@zap.org.au>

# This program takes a PSFTX text representation of a font and generates
# a UTF-8 text output font coverage sampler, similar to the Linux
# showconsolefont(1) utility program.  Please note this program does NOT
# actually load the console font: use setfont(1) to do that.
#
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <https://www.gnu.org/licenses/>.


__version__ = '1.4'
__author__ = 'John Zaitseff <J.Zaitseff@zap.org.au>'


import sys
import argparse
import os.path

import psftxio


#########################################################################
# Global constants

# Codechart constants: number of glyphs per line and per inner block;
# glyphs per line must be a multiple of glyphs per block for best effect.

GLYPHS_PER_LINE = 32
GLYPHS_PER_BLOCK = 8


#########################################################################
# Output functions

def print_font_info(font, name):
    """Print information about the font, including its filename."""

    has_unicode = font.has_unicode_mapping()
    hgn = font.highest_glyph_number()
    count = font.count()

    print('Filename:    ', name)
    print('PSF version: ', str(font.version) if font.version else '(Unknown)')

    if count:
        if count == hgn + 1:
            count_str = '%d' % (hgn + 1)
        else:
            count_str = '%d (%d missing)' % (hgn + 1, hgn + 1 - count)

        print('Glyph size:   %d x %d pixels' % (font.width, font.height))
        print('Glyph count: ', count_str)
        print('Unicode font:','Yes (mapping table present)' if has_unicode \
              else 'No (mapping table not present)')
    else:
        print('Glyph size:   (Unknown)')
        print('Glyph count:  0')
        print('Unicode font: No (mapping table not present)')


def print_codechart(font):
    """Print out a codechart of UTF-8 characters representing the font.

    The first Unicode character mapping for each glyph in the font is
    printed in its correct position in a codechart table.
    """

    if font.count():
        has_unicode = font.has_unicode_mapping()

        for glyph_num in range(font.highest_glyph_number() + 1):
            # Start a new line or add extra space as appropriate
            if glyph_num % (GLYPHS_PER_LINE * GLYPHS_PER_BLOCK) == 0 \
                    and glyph_num > 0:
                print('\n')
            elif glyph_num % GLYPHS_PER_LINE == 0:
                print()
            elif glyph_num % GLYPHS_PER_BLOCK == 0:
                print(' ', end='')

            glyph = font.get(glyph_num)

            if glyph:
                if has_unicode:
                    # Overall font has a Unicode mapping
                    mapping = glyph.unicode_mapping
                    if mapping:
                        # Print the first Unicode mapping for this glyph
                        print(' %s' % mapping[0], end='')
                    else:
                        # No mapping for this glyph: ignore it
                        print('  ', end='')
                else:
                    # Non-Unicode font: ignore control characters
                    if not (0x00 <= glyph_num <= 0x1F or glyph_num == 0x7F):
                        print(' %s' % chr(glyph_num), end='')
            else:
                # Missing glyph: ignore it
                print('  ', end='')
        print()


def chars_present(mappings, string):
    """Return ``True`` if all characters in string are present in mappings."""

    return all((False for char in string if char not in mappings \
                and char != '\n'))


def print_sample(mappings, header, *strings, strict=True, required=None):
    """Print sample strings on a single line.

    If `strict` is ``True`` (the default), print out a header, followed
    by those strings that have *all* their characters present in the
    Unicode character mappings.  The header is only printed out if at
    least one of the strings is printed.

    If `strict` is ``False``, all strings are printed as long as all the
    characters in `required` are present in the Unicode character
    mappings.
    """

    if strict:
        header_printed = False
        for string in strings:
            if chars_present(mappings, string):
                if not header_printed:
                    print(header, end='')
                    header_printed = True
                print('', string, end='')
        if header_printed:
            print()
    else:
        if chars_present(mappings, required):
            print(header, *strings)


def print_all_sample_strings(font):
    """Print all sample strings that this font supports."""

    if font.count():

        # Get a set of all Unicode mappings (or create one if the font is
        # not a Unicode font)

        if font.has_unicode_mapping():
            m = font.get_all_mappings()
        else:
            hgn = font.highest_glyph_number()
            m = { chr(glyph_num) : [glyph_num] for glyph_num in range(hgn + 1)
                  if not (0x00 <= glyph_num <= 0x1F or glyph_num == 0x7F) }

        # Print sample strings

        print()

        print_sample(m, 'ASCII:     ', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789 !"#$%&\'* 1lI|! 0OD 8B ===---')
        print_sample(m, '           ', 'abcdefghijklmnopqrstuvwxyz +,-./:;<=> ?@\\^_`|~ {[(X)]} 1+1-1=1 ___')
        print_sample(m, 'Currency:  ', '$10.00', '10¢', '£10', '¥100', '€10.00', '¤10', '₴10', '100₽', '₺10')
        print_sample(m, 'Quotes:    ', '"abc"', "'abc'", '“abc”', '‘abc’', '‚abc‘', '„abc“', "«abc»", "»abc«", "‹abc›", "`'´", "10°10′10″")
        print_sample(m, 'Misc.:     ', '10%', '10‰', '1-1±1+1', '1=1≠2≤3≥4', '', '* abc', '• abc', '■ abc', '◆ abc', '', '1¼', '2½', '3¾', '←→', '←⎯→')

        if '╔' in m and '┌' in m:
            print_sample(m, '', '           ╔═════════════╦═══╦═╦═╗  ┌─────────────┬───┬─┬─┐\n'
                               'Boxed text: ║ Sample text ║ 1 ╠═╬═╣  │ Sample text │ 2 ├─┼─┤\n'
                               '            ╚═════════════╩═══╩═╩═╝  └─────────────┴───┴─┴─┘',
                         strict=False, required='╔┌')
        else:
            print_sample(m, '', '           ╔═════════════╦═══╦═╦═╗\n'
                               'Boxed text: ║ Sample text ║ 1 ╠═╬═╣\n'
                               '            ╚═════════════╩═══╩═╩═╝',
                         strict=False, required='╔')
            print_sample(m, '', '           ┌─────────────┬───┬─┬─┐\n'
                               'Boxed text: │ Sample text │ 1 ├─┼─┤\n'
                               '            └─────────────┴───┴─┴─┘',
                         strict=False, required='┌')

        print_sample(m, 'Block:     ', '░' * 16, '▒' * 16, '▓' * 16, '█' * 16)

        # These string samples have been taken from a list of pangrams on
        # https://clagnut.com/blog/2380/ and/or from the UTF-8 sampler at
        # http://kermitproject.org/utf8.html

        print_sample(m, 'Armenian:  ', 'Կրնամ ապակի ուտել և ինծի անհանգիստ չըներ։')
        print_sample(m, 'Croatian:  ', 'Gojazni đačić s biciklom drži hmelj i finu vatu u džepu nošnje.')
        print_sample(m, 'Czech:     ', 'Příliš žluťoučký kůň úpěl ďábelské ódy.')
        print_sample(m, 'English:   ', 'The quick brown fox jumps over the lazy dog.')
        print_sample(m, 'Esperanto: ', 'Eble ĉiu kvazaŭ-deca fuŝĥoraĵo ĝojigos homtipon.')
        print_sample(m, 'Estonian:  ', 'Põdur Zagrebi tšellomängija-följetonist Ciqo külmetas kehvas garaažis.')
        print_sample(m, 'Finnish:   ', 'Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.')
        print_sample(m, 'French:    ', "Voix ambiguë d'un cœur qui au zéphyr préfère les jattes de kiwis.")
        print_sample(m, 'Georgian:  ', 'ვეპხის ტყაოსანი შოთა რუსთაველი')
        print_sample(m, 'German:    ', 'Zwölf Boxkämpfer jagen Viktor quer über den großen Sylter Deich.')
        print_sample(m, 'Greek:     ', 'Ο καλύμνιος σφουγγαράς ψιθύρισε πως θα βουτήξει χωρίς να διστάζει.')
        print_sample(m, 'Irish:     ', "D'ḟuascail Íosa Úrṁac na hÓiġe Beannaiṫe pór Éaḃa agus Áḋaiṁ.")
        print_sample(m, 'Klingon:   ', '    ')
        print_sample(m, 'Latvian:   ', 'Muļķa hipiji mēģina brīvi nogaršot celofāna žņaudzējčūsku.')
        print_sample(m, 'Lithuanian:', 'Įlinkdama fechtuotojo špaga sublykčiojusi pragręžė apvalų arbūzą.')
        print_sample(m, 'Macedonian:', 'Ѕидарски пејзаж: шугав билмез со чудење џвака ќофте и кељ на туѓ цех.')
        print_sample(m, 'Mongolian: ', 'Щётканы фермд пийшин цувъя.  Бөгж зогсч хэльюү.')
        print_sample(m, 'Norwegian: ', 'Jeg begynte å fortære en sandwich mens jeg kjørte taxi på vei til quiz.')
        print_sample(m, 'Polish:    ', 'Pchnąć w tę łódź jeża lub ośm skrzyń fig.')
        print_sample(m, 'Romainian: ', 'Muzicologă în bej vând whisky și tequila, preț fix.')
        print_sample(m, 'Russian:   ', 'Широкая электрификация южных губерний даст мощный толчок подъёму сельского хозяйства.')
        print_sample(m, 'Thai:      ', 'นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ')
        print_sample(m, 'Turkish:   ', 'Fahiş bluz güvencesi yağdırma projesi çöktü.')
        print_sample(m, 'Ukrainian: ', 'Чуєш їх, доцю, га?  Кумедна ж ти, прощайся без ґольфів!')
        print_sample(m, 'Vietnamese:', 'Tôi có thể ăn thủy tinh mà không hại gì.')


#########################################################################
# Process command line arguments

def parse_command_line():
    parser = argparse.ArgumentParser(
        usage='%(prog)s [-h] [--no-sample-text] [INPUT]',
        description='Generate a text output font coverage sampler.')
    parser.add_argument(
        '--no-sample-text', '-q', dest='print_samples', action='store_false',
        help='do not print sample text strings')
    parser.add_argument(
        'input', metavar='INPUT', nargs=argparse.OPTIONAL,
        type=argparse.FileType('r'), default=sys.stdin,
        help='text PSFTX file to process (default: stdin)')

    args = parser.parse_args()
    return args


#########################################################################
# Main program

def main():
    args = parse_command_line()

    font = psftxio.readfont(args.input, strict=False)
    name = os.path.basename(args.input.name)

    print_font_info(font, name)
    print_codechart(font)

    if args.print_samples:
        print_all_sample_strings(font)


if __name__ == '__main__':
    main()
