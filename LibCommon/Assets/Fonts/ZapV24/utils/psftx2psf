#!/usr/bin/env python3

#########################################################################
#                                                                       #
#         Convert PSFTX Text Representation to Binary PSF Font          #
#                 Copyright (C) 2004-24, John Zaitseff                  #
#                                                                       #
#########################################################################

# Author: John Zaitseff <J.Zaitseff@zap.org.au>

# This program converts a PSFTX text representation of a PSF font to its
# binary equivalent.  The binary file can then be used as a Linux console
# font in the ordinary way.
#
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <https://www.gnu.org/licenses/>.


__version__ = '2.2'
__author__ = 'John Zaitseff <J.Zaitseff@zap.org.au>'


import sys
import argparse

import psfio
import psftxio


#########################################################################
# Process command line arguments

def parse_command_line():
    parser = argparse.ArgumentParser(
        usage='%(prog)s [-h] [--no-strict] [INPUT [OUTPUT]]',
        description='Convert PSFTX text representation to binary PSF font.')
    parser.add_argument(
        '--no-strict', dest='strict', action='store_false',
        help='do not be as strict with font creation')
    parser.add_argument(
        'input', metavar='INPUT', nargs=argparse.OPTIONAL,
        type=argparse.FileType('r'), default=sys.stdin,
        help='text PSFTX file to convert (default: stdin)')
    parser.add_argument(
        'output', metavar='OUTPUT', nargs=argparse.OPTIONAL,
        type=argparse.FileType('wb'), default=sys.stdout.buffer,
        help='binary PSF font output file (default: stdout)')

    args = parser.parse_args()
    return args


#########################################################################
# Main program

def main():
    args = parse_command_line()

    font = psftxio.readfont(args.input, strict=args.strict)
    psfio.writefont(font, args.output, strict=args.strict)


if __name__ == '__main__':
    main()
