#!/usr/bin/env python3

#########################################################################
#                                                                       #
#                  Create a Blank Template PSFTX File                   #
#                 Copyright (C) 2004-24, John Zaitseff                  #
#                                                                       #
#########################################################################

# Author: John Zaitseff <J.Zaitseff@zap.org.au>

# This program generates a blank template PSFTX file that can be used to
# create a Linux console font file.
#
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <https://www.gnu.org/licenses/>.


__version__ = '2.3'
__author__ = 'John Zaitseff <J.Zaitseff@zap.org.au>'


import sys
import argparse
import re

import psffont
from psffont import MIN_WIDTH, MAX_WIDTH, MIN_HEIGHT, MAX_HEIGHT, \
                    MIN_GLYPH_COUNT, MAX_GLYPH_COUNT
import psftxio


#########################################################################
# Global constants

DEFAULT_WIDTH = 8                       # Glyph width in pixels
# DEFAULT_HEIGHT = 16                   # No default: must be specified
DEFAULT_GLYPH_COUNT = 256               # Number of glyphs in font


#########################################################################
# Process command line arguments

def parse_command_line():

    def width_height(arg):
        """Parse ``[WIDTHx]HEIGHT`` parameter."""
        m = re.search(r'^(?:(?P<width>\d+)x)?(?P<height>\d+)$', arg)
        if m:
            if m.group('width') is not None:
                return (int(m.group('width')), int(m.group('height')))
            else:
                return (DEFAULT_WIDTH, int(m.group('height')))
        else:
            raise argparse.ArgumentTypeError('invalid value: %s' % arg)


    parser = argparse.ArgumentParser(
        usage='%(prog)s [-h] [--vga] [--output FILE] [--no-unicode]\n'
              '           [WIDTHx]HEIGHT [GLYPHCOUNT]',
        description='Create a blank template PSFTX file.')
    # 'usage' is specified to overcome Python issue #11874
    parser.add_argument(
        '--vga', '-9', action='store_true',
        help='create a 9th column for VGA-style fonts')
    parser.add_argument(
        '--output', '-o', metavar='FILE', type=argparse.FileType('w'),
        default=sys.stdout, help='send output to file FILE (default: stdout)')
    parser.add_argument(
        '--no-unicode', '-U', dest='unicode', action='store_false',
        help='do not add Unicode mappings for ASCII glyph positions')
    parser.add_argument(
        'size', metavar='[WIDTHx]HEIGHT', type=width_height,
        help='width (optional) and height of each glyph in pixels (default '
             'width: %d)' % DEFAULT_WIDTH)
    parser.add_argument(
        'glyph_count', metavar='GLYPHCOUNT', nargs=argparse.OPTIONAL,
        type=int, default=DEFAULT_GLYPH_COUNT,
        help='number of glyphs in font (default: %d)' % DEFAULT_GLYPH_COUNT)
    args = parser.parse_args()

    # Check validity of arguments

    (args.width, args.height) = args.size
    if not MIN_WIDTH <= args.width <= MAX_WIDTH:
        parser.error('illegal glyph width: %d (must be %d..%d)'
                     % (args.width, MIN_WIDTH, MAX_WIDTH))
    if not MIN_HEIGHT <= args.height <= MAX_HEIGHT:
        parser.error('illegal glyph height: %d (must be %d..%d)'
                     % (args.height, MIN_HEIGHT, MAX_HEIGHT))
    if not MIN_GLYPH_COUNT <= args.glyph_count <= MAX_GLYPH_COUNT:
        parser.error('illegal glyph count: %d (must be %d..%d)'
                     % (args.glyph_count, MIN_GLYPH_COUNT, MAX_GLYPH_COUNT))
    if args.vga and args.width != 8:
        parser.error('--vga option is only valid with glyph width 8')

    return args


#########################################################################
# Main program

def main():
    args = parse_command_line()

    # Create font and glyph objects

    font = psffont.Font()

    for glyph_num in range(args.glyph_count):
        glyph = psffont.Glyph(args.width, args.height)
        if args.unicode and 0x20 <= glyph_num <= 0x7E:
            glyph.unicode_mapping = [chr(glyph_num)]
        font[glyph_num] = glyph

    # Generate PSFTX file

    psftxio.writefont(font, args.output, strict=False, vga=args.vga,
                      title='PSFTX font file template', name=args.output.name)


if __name__ == '__main__':
    main()
