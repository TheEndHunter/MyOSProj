#!/usr/bin/env python3

#########################################################################
#                                                                       #
#                Generate a PDF Font Coverage Codechart                 #
#                 Copyright (C) 2017-24, John Zaitseff                  #
#                                                                       #
#########################################################################

# Author: John Zaitseff <J.Zaitseff@zap.org.au>

# This program takes a PSFTX text representation of a font and generates
# a PDF font coverage codechart, similar to Unicode codecharts.
#
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <https://www.gnu.org/licenses/>.


__version__ = '1.2'
__author__ = 'John Zaitseff <J.Zaitseff@zap.org.au>'


import sys
import argparse
import os
import os.path
import pwd
import copy

from reportlab.pdfgen import canvas
from reportlab.platypus import *

from reportlab.rl_config import defaultPageSize
from reportlab.lib import colors
from reportlab.lib.styles import ParagraphStyle
from reportlab.lib.units import mm
from reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER

import psftxio
import unicustom


#########################################################################
# Global constants and variables

DEFAULT_OUTPUT_PDF = 'output.pdf'

PAGE_WIDTH = defaultPageSize[0]
PAGE_HEIGHT = defaultPageSize[1]
PAGE_TOP_MARGIN = 15.0*mm
PAGE_BOTTOM_MARGIN = 20.0*mm              # Allow space for page number
PAGE_LEFT_MARGIN = 15.0*mm
PAGE_RIGHT_MARGIN = 15.0*mm
PAGE_MIDDLE_MARGIN = 10.0*mm              # Between columns of text

SUBJECT = 'Linux console font codechart'

SIZE_NORMAL = 16                          # Tables of 16 x 16 glyphs
SIZE_LARGE = 8                            #   of 8 x 8 glyphs
SIZE_HUGE = 4                             #   of 4 x 4 glyphs

LABELS_COLS_NORMAL = ['%X' % n for n in range(16)]
LABEL_WIDTH = 40                          # Width of row labels

CODECHART_PADDING_LR = 3                  # Padding to left and right of glyphs
CODECHART_PADDING_TB = 3                  # Padding above and below glyphs

GLYPH_PIXEL_COLOR = colors.black
GLYPH_GRID_LIT_COLOR = colors.Color(0.25, 0.25, 0.25)
GLYPH_GRID_UNLIT_COLOR = colors.Color(0.8, 0.8, 0.8)
GLYPH_OUTLINE_COLOR = colors.Color(0.6, 0.6, 0.6)

GLYPH_GRID_RATIO = 16                     # Glyph grid is 1/16 of pixel width
GLYPH_OUTLINE_RATIO = 8                   # Glyph outline is 1/8 of pixel width


#########################################################################
# Platypus flow element GlyphDrawing

class GlyphDrawing(Flowable):
    """Resizable representation of a font glyph."""

    def __init__(self, glyph, max_width, max_height, font_width, font_height,
                 draw_grid=True, draw_outline=True):
        """Initialise the flow element `GlyphDrawing`.

        `glyph` must contain a `psffont.Glyph` object, or ``None``.
        `max_width` and `max_height` are the maximum width and height of
        the drawn glyph; the aspect ratio of the glyph is correctly
        maintained.  If `draw_grid` is ``True``, an internal per-pixel
        grid is drawn; if `draw_outline` is ``True``, a box around the
        glyph is drawn (if `draw_grid` is ``True``, `draw_outline`
        automatically becomes ``True``).
        """

        super().__init__()
        self._glyph = glyph
        self._max_width = max_width
        self._max_height = max_height
        if glyph:
            self._font_width = glyph.width
            self._font_height = glyph.height
        else:
            self._font_width = font_width
            self._font_height = font_height
        self._draw_grid = draw_grid
        self._draw_outline = draw_outline or draw_grid

        # Preserve aspect ratio of the glyph
        ratio = self._font_height / self._font_width
        ratio_height = max_width * ratio
        ratio_width = max_height / ratio
        if ratio_height > max_height:
            self.width = ratio_width
            self.height = max_height
        else:
            self.width = max_width
            self.height = ratio_height

        # Take into account the width of any outline
        if self._draw_outline:
            self._outline_line_width = max(
                self.width / (font_width * GLYPH_OUTLINE_RATIO + 2),
                0.16*mm)
            self._inner_width = self.width - self._outline_line_width * 2
            self._inner_height = self.height - self._outline_line_width * 2
            self._inner_offset = self._outline_line_width
        else:
            self._outline_line_width = 0
            self._inner_width = self.width
            self._inner_height = self.height
            self._inner_offset = 0

        self._pixel_width = self._inner_width / self._font_width
        self._pixel_height = self._inner_height / self._font_height
        self._grid_line_width = max(self._pixel_width / GLYPH_GRID_RATIO,
                                    0.08*mm)

    def __repr__(self):
        """gd.__repr__() <==> repr(gd)"""
        return '%s(%s, %s, %s, %s)' % (
            type(self).__name__,
            repr(self._glyph),
            self._max_width,
            self._max_height,
            self._draw_grid)

    def draw(self):
        """Draw the actual glyph, if it is not ``None``."""

        glyph = self._glyph
        pixel_width = self._pixel_width
        pixel_height = self._pixel_height
        inner_offset = self._inner_offset
        draw_grid = self._draw_grid

        if glyph:
            if draw_grid:
                self.canv.setStrokeColor(GLYPH_GRID_UNLIT_COLOR)
                self.canv.setLineWidth(self._grid_line_width)
                for x in (n * pixel_width for n in range(self._font_width + 1)):
                    self.canv.line(x + inner_offset, inner_offset,
                                   x + inner_offset,
                                   self._inner_height + inner_offset)
                for y in (n * pixel_height for n in range(self._font_height + 1)):
                    self.canv.line(inner_offset, y + inner_offset,
                                   self._inner_width + inner_offset,
                                   y + inner_offset)

            self.canv.setStrokeColor(GLYPH_GRID_LIT_COLOR)
            self.canv.setFillColor(GLYPH_PIXEL_COLOR)
            self.canv.setLineWidth(self._grid_line_width)

            for (y, row) in enumerate(range(self._font_height), 0):
                for (x, bit) in enumerate(glyph[row], 0):
                    if bit == 1:
                        self.canv.rect(x * pixel_width + inner_offset,
                                       y * pixel_height + inner_offset,
                                       pixel_width, pixel_height,
                                       stroke=draw_grid, fill=True)

            if self._draw_outline:
                self.canv.setStrokeColor(GLYPH_OUTLINE_COLOR)
                self.canv.setLineWidth(self._outline_line_width)
                self.canv.rect(inner_offset / 2, inner_offset / 2,
                               self.width - self._outline_line_width,
                               self.height - self._outline_line_width)


#########################################################################
# Generate PDF output

def get_glyph_num_format(highest_glyph_number):
    return '0x%02X' if highest_glyph_number < 256 else '0x%03X'


def draw_page_number(canv, doc):
    """Draw a page number centred in the footer of the page."""

    canv.saveState()
    canv.setFont('Helvetica', 9)
    canv.drawCentredString(PAGE_WIDTH / 2, PAGE_BOTTOM_MARGIN - 5.0*mm,
                           'Page %d' % doc.page)
    canv.restoreState()


def draw_chart_page(canv, doc):
    draw_page_number(canv, doc)


def draw_mappings_page(canv, doc):
    draw_page_number(canv, doc)


def make_document_structure(file, title, author):
    """Create the PDF document structure and return it as a template."""

    doc = BaseDocTemplate(
        file, title=title, author=author, subject=SUBJECT,
        creator='%s v%s' % (os.path.basename(sys.argv[0]), __version__),
        topMargin=PAGE_TOP_MARGIN, bottomMargin=PAGE_BOTTOM_MARGIN,
        leftMargin=PAGE_LEFT_MARGIN, rightMargin=PAGE_RIGHT_MARGIN)

    half_width = (doc.width - PAGE_MIDDLE_MARGIN) / 2
    normal_frame = Frame(
        doc.leftMargin, doc.bottomMargin, doc.width, doc.height, id='normal')
    left_col_frame = Frame(
        doc.leftMargin, doc.bottomMargin, half_width, doc.height, id='left_col')
    right_col_frame = Frame(
        doc.leftMargin + half_width + PAGE_MIDDLE_MARGIN, doc.bottomMargin,
        half_width, doc.height, id='right_col')

    doc.addPageTemplates([
        PageTemplate(id='chart', frames=normal_frame, onPage=draw_chart_page),
        PageTemplate(id='mappings', frames=[left_col_frame, right_col_frame],
                     onPage=draw_mappings_page)])

    return doc, normal_frame.width, left_col_frame.width, normal_frame.height


def make_document_styles():
    """Create and return the styles used in the PDF document."""

    styles = {}

    styles['Normal'] = ParagraphStyle(
        'Normal', fontName='Helvetica', fontSize=10, leading=12)
    styles['GlyphNum'] = ParagraphStyle(
        'GlyphNum', fontName='Helvetica', fontSize=8, leading=8,
        alignment=TA_CENTER)
    styles['GlyphNumLabel'] = ParagraphStyle(
        'GlyphNumLabel', fontName='Helvetica', fontSize=10, leading=12,
        alignment=TA_CENTER)
    styles['Title'] = ParagraphStyle(
        'Title', fontName='Helvetica-Bold', fontSize=16, leading=20,
        alignment=TA_CENTER)
    styles['Subtitle'] = ParagraphStyle(
        'Subtitle', parent=styles['Title'], fontSize=12, leading=14,
        spaceAfter=12)
    styles['Heading'] = ParagraphStyle(
        'Heading', parent=styles['Subtitle'], spaceBefore=12, spaceAfter=6,
        alignment=TA_LEFT)

    styles['CodeChartWithLabels'] = TableStyle(
        [('NOSPLIT', (0, 0), (-1, -1)),
         ('FONT', (1, 1), (-1, -1), 'Helvetica', 8, 8),
         ('FONT', (0, 0), (-1, 0), 'Helvetica', 10, 12),
         ('FONT', (0, 0), (0, -1), 'Helvetica', 10, 12),
         ('LEFTPADDING', (0, 0), (-1, -1), CODECHART_PADDING_LR),
         ('RIGHTPADDING', (0, 0), (-1, -1), CODECHART_PADDING_LR),
         ('TOPPADDING', (0, 0), (-1, -1), CODECHART_PADDING_TB),
         ('BOTTOMPADDING', (0, 0), (-1, -1), CODECHART_PADDING_TB),
         ('ALIGNMENT', (0, 0), (-1, -1), 'CENTER'),
         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
         ('INNERGRID', (1, 1), (-1, -1), 0.2*mm, colors.gray),
         ('OUTLINE', (1, 1), (-1, -1), 0.4*mm, colors.black)])
    styles['CodeChartNoLabels'] = TableStyle(
        [('NOSPLIT', (0, 0), (-1, -1)),
         ('FONT', (0, 0), (-1, -1), 'Helvetica', 8, 8),
         ('LEFTPADDING', (0, 0), (-1, -1), CODECHART_PADDING_LR),
         ('RIGHTPADDING', (0, 0), (-1, -1), CODECHART_PADDING_LR),
         ('TOPPADDING', (0, 0), (-1, -1), CODECHART_PADDING_TB),
         ('BOTTOMPADDING', (0, 0), (-1, -1), CODECHART_PADDING_TB),
         ('ALIGNMENT', (0, 0), (-1, -1), 'CENTER'),
         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
         ('INNERGRID', (0, 0), (-1, -1), 0.2*mm, colors.gray),
         ('OUTLINE', (0, 0), (-1, -1), 0.4*mm, colors.black)])
    styles['InfoTable'] = TableStyle(
        [('FONT', (0, 0), (-1, -1), 'Helvetica', 10, 12),
         ('LEFTPADDING', (0, 0), (0, -1), 6),
         ('LEFTPADDING', (1, 0), (1, -1), 0),
         ('RIGHTPADDING', (0, 0), (0, -1), 0),
         ('RIGHTPADDING', (-1, 0), (-1, -1), 6),
         ('TOPPADDING', (0, 0), (-1, -1), 0),
         ('BOTTOMPADDING', (0, 0), (-1, -1), 2),
         ('ALIGNMENT', (0, 0), (-1, -1), 'LEFT'),
         ('VALIGN', (0, 0), (-1, -1), 'TOP')])
    styles['MappingsTable'] = TableStyle(
        [('FONT', (0, 0), (-1, -1), 'Helvetica', 10, 12),
         ('LEFTPADDING', (0, 0), (0, -1), 6),
         ('LEFTPADDING', (1, 0), (-1, -1), 0),
         ('RIGHTPADDING', (0, 0), (-2, -1), 0),
         ('RIGHTPADDING', (-1, 0), (-1, -1), 6),
         ('TOPPADDING', (0, 0), (-1, -1), 0),
         ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
         ('ALIGNMENT', (0, 0), (-1, -1), 'LEFT'),
         ('VALIGN', (0, 0), (-1, -1), 'TOP')])

    return styles


def add_paragraph(story, text, style):
    """Add a paragraph to the Platypus `story`."""
    story.append(Paragraph(text, style))


def add_table(story, table, col_widths, style):
    """Add a table to the Platypus `story`."""
    story.append(Table(table, colWidths=col_widths, style=style))


def add_codechart(story, font, cols, rows, styles, page_width, page_height,
                  start_glyph, use_labels, labels_cols=None, labels_rows=None,
                  glyph_num_format=None):
    """Create a single codechart and add it to the Platypus `story`.

    The codechart will have `cols` x `rows` glyphs in it, starting from
    `start_glyph`.  If `use_labels` is ``True``, `labels_cols` and
    `labels_rows` must contain a list of column and row labels to use:
    these are printed above and to the left, respectively, of the chart.
    If `use_labels` is ``False``, each glyph will have its glyph number
    printed underneath it, in which case `glyph_num_format` must not be
    ``None``.
    """

    font_width = font.width
    font_height = font.height
    codechart_table = []

    # Cater for codecharts that must have less rows than normal
    hgn = font.highest_glyph_number()
    extra_row = 1 if (hgn - start_glyph + 1) % rows != 0 else 0
    max_rows = min(rows, (hgn - start_glyph + 1) // rows + extra_row)

    if use_labels:
        col_width = (page_width - LABEL_WIDTH) / cols
        codechart_widths = [LABEL_WIDTH]
        codechart_widths += [col_width for col in range(cols)]

        max_height = (page_height - 35*mm) / rows - CODECHART_PADDING_TB * 2
        style = copy.deepcopy(styles['CodeChartWithLabels'])

        # The first row consists of items from label_cols
        table_row = []
        add_paragraph(table_row, '', styles['GlyphNumLabel'])
        for label in labels_cols:
            add_paragraph(table_row, label, styles['GlyphNumLabel'])
        codechart_table.append(table_row)
    else:
        col_width = page_width / cols
        codechart_widths = [col_width for col in range(cols)]

        max_height = (page_height - 22*mm) / rows - CODECHART_PADDING_TB * 3 - 9
        style = copy.deepcopy(styles['CodeChartNoLabels'])

    max_width = col_width - CODECHART_PADDING_LR * 2

    for row in range(max_rows):
        table_row = []
        if use_labels:
            add_paragraph(table_row, labels_rows[row], styles['GlyphNumLabel'])

        for col in range(cols):
            glyph_num = start_glyph + row * cols + col
            glyph = font.get(glyph_num)
            table_cell = [GlyphDrawing(glyph, max_width, max_height,
                                       font_width, font_height)]
            if not use_labels and glyph_num <= hgn:
                add_paragraph(table_cell, glyph_num_format % glyph_num,
                              styles['GlyphNum'])
            if not glyph:
                colrow = (col + 1, row + 1) if use_labels else (col, row)
                style.add('BACKGROUND', colrow, colrow, colors.lightgrey)
            table_row.append(table_cell)
        codechart_table.append(table_row)

    add_table(story, codechart_table, codechart_widths, style)


def add_all_codecharts(story, font, cols, rows, styles, page_width, page_height):
    """Create all of the glyph codecharts and add them to the Platypus `story`.

    This function generates enough glyph codecharts to cover the entire
    font.  Each individual codechart will have `cols` x `rows` glyphs in
    it (although the last codechart may have less rows in it).
    """

    hgn = font.highest_glyph_number()
    glyph_num_format = get_glyph_num_format(hgn)

    # Cater for a codechart that has less rows in it than normal
    glyphs_in_codechart = cols * rows
    extra_chart = 1 if (hgn + 1) % glyphs_in_codechart != 0 else 0
    num_codecharts = (hgn + 1) // glyphs_in_codechart + extra_chart

    for start_glyph in range(0, hgn + 1, glyphs_in_codechart):
        # Add a heading for the glyph range covered in this codechart
        end_glyph = min(start_glyph + glyphs_in_codechart - 1, hgn)
        start_glyph_str = glyph_num_format % start_glyph
        end_glyph_str = glyph_num_format % end_glyph
        if start_glyph_str == end_glyph_str:
            add_paragraph(story, 'Glyph %s' % start_glyph_str, styles['Heading'])
        else:
            add_paragraph(story, 'Glyphs %s to %s' %
                          (start_glyph_str, end_glyph_str), styles['Heading'])

        if cols == 16:
            labels_rows = []
            for num in range(start_glyph, start_glyph + glyphs_in_codechart, 16):
                labels_rows.append((glyph_num_format % num)[:-1] + '_')

            add_codechart(story, font, cols, rows, styles, page_width,
                          page_height, start_glyph, use_labels=True,
                          labels_cols=LABELS_COLS_NORMAL,
                          labels_rows=labels_rows)
        else:
            add_codechart(story, font, cols, rows, styles, page_width,
                          page_height, start_glyph, use_labels=False,
                          glyph_num_format=glyph_num_format)
        story.append(PageBreak())

    # Remove the last PageBreak()
    story.pop()


def add_mappings_table(story, font, styles, col_width):
    """Create the Unicode mappings table and add it to the Platypus `story`.

    The generated table has three columns: the glyph number, the glyph
    itself and the Unicode mappings for the glyph, one per line.
    """

    hgn = font.highest_glyph_number()
    font_width = font.width
    font_height = font.height

    mappings_table = []
    glyph_num_format = get_glyph_num_format(hgn)

    for glyph_num in range(hgn + 1):
        glyph = font.get(glyph_num)

        table_row = []
        add_paragraph(table_row, glyph_num_format % glyph_num, styles['Normal'])
        table_row.append(GlyphDrawing(glyph, 12, 15, font_width, font_height,
                                      draw_grid=False))

        if glyph:
            # Process the mappings for each glyph that is present
            mappings = glyph.unicode_mapping
            mappings_col = []
            if mappings:
                for mapping in mappings:
                    if len(mapping) == 1:
                        # Direct (single-character) mapping
                        mappings_col.append('<b>U+%04X</b> %s' %
                                            (ord(mapping),
                                             unicustom.name(mapping)))
                    else:
                        # Sequence (multi-character) mapping
                        seq = []
                        for char in mapping:
                            seq.append('<b>U+%04X</b> %s' %
                                       (ord(char), unicustom.name(char)))
                        mappings_col.append('<b>SEQ</b> \u00AB'
                                            + ' + '.join(seq) + '\u00BB')
                # Each mapping is to be on its own line
                add_paragraph(table_row, ',<br/>'.join(mappings_col),
                              styles['Normal'])
            else:
                add_paragraph(table_row, '<i>&lt;Missing mapping&gt;</i>',
                              styles['Normal'])
        else:
            add_paragraph(table_row, '<i>&lt;Missing glyph&gt;</i>',
                          styles['Normal'])

        mappings_table.append(table_row)

    add_table(story, mappings_table, [40, 20, col_width - 60],
              styles['MappingsTable'])


def generate_pdf(font, file, name, title, size):
    """Main routine that generates the output PDF."""

    hgn = font.highest_glyph_number()
    width = font.width
    height = font.height

    # Retrieve the user's full name from the password database if possible
    author = pwd.getpwuid(os.getuid())[4].partition(',')[0]
    if not author:
        author = ''

    doc, page_width, col_width, page_height = \
        make_document_structure(file, title, author)
    styles = make_document_styles()

    # Create the actual document content

    story = []
    add_paragraph(story, title, styles['Title'])
    add_paragraph(story, SUBJECT, styles['Subtitle'])

    add_all_codecharts(story, font, size, size, styles, page_width, page_height)

    story.append(NextPageTemplate('mappings'))
    story.append(PageBreak())

    count = font.count()
    if count == hgn + 1:
        count_str = '%d' % (hgn + 1)
    else:
        count_str = '%d (%d missing)' % (hgn + 1, hgn + 1 - count)

    has_unicode_mapping = font.has_unicode_mapping()

    add_paragraph(story, 'Font information', styles['Heading'])

    info_table = [[], [], [], [], []]
    add_paragraph(info_table[0], 'Filename:', styles['Normal'])
    add_paragraph(info_table[0], name, styles['Normal'])
    add_paragraph(info_table[1], 'PSF version:', styles['Normal'])
    add_paragraph(info_table[1], str(font.version) \
                      if font.version \
                      else '(Unknown)',
                  styles['Normal'])
    add_paragraph(info_table[2], 'Glyph size:', styles['Normal'])
    add_paragraph(info_table[2], '%d \u00D7 %d pixels' % (width, height),
                  styles['Normal'])
    add_paragraph(info_table[3], 'Glyph count:', styles['Normal'])
    add_paragraph(info_table[3], count_str, styles['Normal'])
    add_paragraph(info_table[4], 'Unicode font:', styles['Normal'])
    add_paragraph(info_table[4], 'Yes (mapping table present)' \
                      if has_unicode_mapping \
                      else 'No (mapping table not present)',
                  styles['Normal'])
    add_table(story, info_table, [col_width * 0.3, col_width * 0.7],
              styles['InfoTable'])

    if has_unicode_mapping:
        add_paragraph(story, 'Unicode mappings', styles['Heading'])
        add_mappings_table(story, font, styles, col_width)

    doc.build(story)


#########################################################################
# Process command line arguments

def parse_command_line():
    parser = argparse.ArgumentParser(
        usage='%(prog)s [-h] [--name NAME] [--title TITLE]\n'
              '           [--size {normal|large|huge}] [INPUT [OUTPUT]]',
        description='Generate a PDF font coverage codechart.')
    parser.add_argument(
        '--name', '-N', metavar='NAME', help='font name (default: INPUT)')
    parser.add_argument(
        '--title', '-T', metavar='TITLE', help='document title (default: NAME)')
    parser.add_argument(
        '--size', '-S', choices=['normal', 'large', 'huge'], default='normal',
        help='Glyph size in the codechart tables (default: normal)')
    parser.add_argument(
        'input', metavar='INPUT', nargs=argparse.OPTIONAL,
        type=argparse.FileType('r'), default=sys.stdin,
        help='text PSFTX file to process (default: stdin)')
    parser.add_argument(
        'output', metavar='OUTPUT', nargs=argparse.OPTIONAL,
        type=argparse.FileType('wb'), help='PDF output file (default: INPUT.pdf)')
    args = parser.parse_args()

    # Fill missing (optional) arguments

    if not args.output:
        if not args.input.name or args.input.name == '<stdin>':
            output_name = DEFAULT_OUTPUT_PDF
        else:
            output_name = os.path.splitext(args.input.name)[0] + '.pdf'
        args.output = open(output_name, 'wb')

    if not args.name:
        args.name = os.path.basename(args.input.name)

    if not args.title:
        args.title = args.name

    # Convert size argument to numeric constants

    if args.size == 'normal':
        args.size = SIZE_NORMAL
    elif args.size == 'large':
        args.size = SIZE_LARGE
    elif args.size == 'huge':
        args.size = SIZE_HUGE
    else:
        raise RuntimeError('unknown size: %s' % args.size)

    return args


#########################################################################
# Main program

def main():
    args = parse_command_line()

    font = psftxio.readfont(args.input, strict=False)
    if not font.count():
        raise RuntimeError('font file %s has no glyphs' % args.input.name)

    generate_pdf(font, args.output, name=args.name, title=args.title,
                 size=args.size)


if __name__ == '__main__':
    main()
