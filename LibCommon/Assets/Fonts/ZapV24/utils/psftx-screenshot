#!/usr/bin/env python3

#########################################################################
#                                                                       #
#                 Generate a Simulated Screenshot Image                 #
#                 Copyright (C) 2017-24, John Zaitseff                  #
#                                                                       #
#########################################################################

# Author: John Zaitseff <J.Zaitseff@zap.org.au>

# This program takes a PSFTX text representation of a font and some input
# text and generates a simulated screenshot image of that font in use on
# the input text.
#
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <https://www.gnu.org/licenses/>.


__version__ = '1.2'
__author__ = 'John Zaitseff <J.Zaitseff@zap.org.au>'


import sys
import argparse
import os.path

from PIL import Image

import psftxio


#########################################################################
# Global constants and variables

DEFAULT_OUTPUT_PNG = 'output.png'

DEFAULT_FOREGROUND = 'white'
DEFAULT_BACKGROUND = 'black'

VGA_COLORS = {
    # These RGB values are taken from the Linux kernel, version 4.10,
    # from the file drivers/tty/vt/vt.c, arrays default_red, default_grn
    # and default_blu.
    'black':         (0x00, 0x00, 0x00),
    'red':           (0xAA, 0x00, 0x00),
    'green':         (0x00, 0xAA, 0x00),
    'yellow':        (0xAA, 0x55, 0x00),
    'blue':          (0x00, 0x00, 0xAA),
    'magenta':       (0xAA, 0x00, 0xAA),
    'cyan':          (0x00, 0xAA, 0xAA),
    'white':         (0xAA, 0xAA, 0xAA),
    'gray':          (0x55, 0x55, 0x55),
    'grey':          (0x55, 0x55, 0x55),
    'brightred':     (0xFF, 0x55, 0x55),
    'brightgreen':   (0x55, 0xFF, 0x55),
    'brightyellow':  (0xFF, 0xFF, 0x55),
    'brightblue':    (0x55, 0x55, 0xFF),
    'brightmagenta': (0xFF, 0x55, 0xFF),
    'brightcyan':    (0x55, 0xFF, 0xFF),
    'brightwhite':   (0xFF, 0xFF, 0xFF),
}

INDEX_FOREGROUND = 1                      # Palette index number
INDEX_BACKGROUND = 0


#########################################################################
# Utility functions

def color(val):
    """Convert the color string `val` into an RGB triplet."""
    val = val.strip().lower()
    if val[0] == '#':
        # Hexadecimal string can be of the form '#rgb' or '#rrggbb'
        if len(val) == 4:
            result = (int(val[1]*2, 16), int(val[2]*2, 16), int(val[3]*2, 16))
        elif len(val) == 7:
            result = (int(val[1:3], 16), int(val[3:5], 16), int(val[5:7], 16))
        else:
            raise ValueError('illegal color hex string: %s' % val)
    else:
        result = VGA_COLORS.get(val)
        if not result:
            raise ValueError('unknown color name: %s' % val)

    return result


#########################################################################
# Generate screenshot image

def image_palette(foreground, background):
    """Generate a PIL-compatible color palette."""
    return [*background, *foreground]


def process_glyph(img, glyph, start_x, start_y):
    """Place `glyph` into the image `img` at location (`start_x`, `start_y`)."""
    glyph_height = glyph.height
    for x in range(glyph.width):
        for y in range(glyph_height):
            if glyph[x, y]:
                # Note that glyph is stored "upside down"
                img.putpixel((start_x + x, start_y + glyph_height - y - 1),
                             INDEX_FOREGROUND)


def process_text(font, input_text, img):
    """Process `input_text` using `font`, into the image `img`."""
    font_height = font.height
    font_width = font.width
    has_unicode = font.has_unicode_mapping()
    mappings = font.get_all_mappings()

    for (line_num, line) in enumerate(input_text):
        start_y = line_num * font_height

        for (col_num, char) in enumerate(line):
            start_x = col_num * font_width
            glyph_num = None

            # Attempt to get the glyph corresponding to char.  This does
            # not handle Unicode sequences.

            if has_unicode:
                glyph_nums = mappings.get(char)
                if glyph_nums:
                    # Direct Unicode mapping found, use first matching glyph
                    glyph_num = glyph_nums[0]
                else:
                    glyph_nums = mappings.get('\uFFFD')   # REPLACEMENT CHARACTER
                    if glyph_nums:
                        glyph_num = glyph_nums[0]
            else:
                # Assume mapping is ISO-8859-1, but ignore control characters
                if not (0x00 <= ord(char) <= 0x1F or ord(char) == 0x7F):
                    glyph_num = ord(char)

            glyph = font.get(glyph_num)
            if glyph:
                process_glyph(img, glyph, start_x, start_y)


def generate_screenshot(font, input_file, output_file, foreground, background):
    """Main routine that generates the output image."""

    # Read the input file

    input_text = input_file.read().expandtabs().splitlines()

    height = len(input_text)
    if not height:
        raise RuntimeError('input text is empty')

    width = max((len(line) for line in input_text))
    if not width:
        raise RuntimeError('input text consists of blank lines')

    # Create the output screenshot image

    img = Image.new('P', (width * font.width, height * font.height),
                    INDEX_BACKGROUND)
    img.putpalette(image_palette(foreground, background))

    process_text(font, input_text, img)
    img.save(output_file)


#########################################################################
# Process command line arguments

def parse_command_line():

    def parse_color(arg):
        try:
            return color(arg)
        except ValueError as e:
            raise argparse.ArgumentTypeError(e)


    parser = argparse.ArgumentParser(
        usage='%(prog)s [-h] [--foreground COLOR] [--background COLOR]\n'
              '           FONTFILE [INPUT [OUTPUT]]',
        description='Generate a simulated screenshot image.')
    parser.add_argument(
        '--foreground', metavar='COLOR', type=parse_color,
        help='use COLOR as the foreground color (default: %s)' %
        DEFAULT_FOREGROUND)
    parser.add_argument(
        '--background', metavar='COLOR', type=parse_color,
        help='use COLOR as the background color (default: %s)' %
        DEFAULT_BACKGROUND)
    parser.add_argument(
        'fontfile', metavar='FONTFILE', type=argparse.FileType('r'),
        help='font PSFTX file to use (required)')
    parser.add_argument(
        'input', metavar='INPUT', nargs=argparse.OPTIONAL,
        type=argparse.FileType('r'), default=sys.stdin,
        help='input text to convert to image (default: stdin)')
    parser.add_argument(
        'output', metavar='OUTPUT', nargs=argparse.OPTIONAL,
        type=argparse.FileType('wb'),
        help='output image to create (default: INPUT.png)')
    args = parser.parse_args()

    # Fill missing (optional) arguments

    if not args.output:
        if not args.input.name or args.input.name == '<stdin>':
            output_name = DEFAULT_OUTPUT_PNG
        else:
            output_name = os.path.splitext(args.input.name)[0] + '.png'
        args.output = open(output_name, 'wb')

    if not args.foreground:
        args.foreground = color(DEFAULT_FOREGROUND)
    if not args.background:
        args.background = color(DEFAULT_BACKGROUND)

    return args


#########################################################################
# Main program

def main():
    args = parse_command_line()

    font = psftxio.readfont(args.fontfile, strict=False)
    if not font.count():
        raise RuntimeError('font file %s has no glyphs' % args.fontfile.name)

    generate_screenshot(font, args.input, args.output,
                        args.foreground, args.background)


if __name__ == '__main__':
    main()
